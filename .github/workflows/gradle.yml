name: Java CI/CD with Gradle

on:
  # pull request가 develop에서 이루어질 때 ci/cd 실행
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2 # 만약 v1이라면 with의 distribution는 생략해도 된다.
        with:
          java-version: '17'
          distribution: 'zulu'

      # 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # Build Gradle
      - name: Build with Gradle
        # test code는 빌드하지 않음
        run: ./gradlew assemble

      # docker container builder driver를 사용하여 builder를 만들고 부팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 도커 허브에 로그인
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # *.jar -> Docker Image Build
      # 디렉토리 이름은 마음대로 /air_dns_test
      - name: Docker Image Build
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/aaaaaa .

      # DockerHub's Image push
      - name: DockerHub Push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/aaaaaa

      # run application, ec2 client name : appleboy
      - name: Run Application
        uses: appleboy/ssh-action@v0.1.9
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_KEY }}
          port: 22
          script: |
            sudo docker kill aaaaaa
            sudo docker rm -f aaaaaa
            sudo docker rmi ${{ secrets.DOCKERHUB_USERNAME }}/aaaaaa
            sudo docker pull ${{ secrets.DOCKERHUB_USERNAME }}/aaaaaa
            sudo docker run -p 8082:8082 --name aaaaaa -d ${{ secrets.DOCKERHUB_USERNAME}}/aaaaaa