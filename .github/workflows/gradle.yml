name: Java CI/CD with Gradle

on:
  # pull request가 develop에서 이루어질 때 ci/cd 실행
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 17
        uses: actions/setup-java@v2 # 만약 v1이라면 with의 distribution는 생략해도 된다.
        with:
          java-version: '17'
          distribution: 'zulu'

      # 권한 부여
      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      # gradle caching
      - name: Gradle Caching
        uses: actions/cache@v2
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-
      # Build Gradle
      - name: Build with Gradle
        # test code는 빌드하지 않음
        run: ./gradlew assemble

      # docker container builder driver를 사용하여 builder를 만들고 부팅
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      # DockerHub 계정 로그인
      - name: DockerHub Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME}}
          password: ${{ secrets.DOCKERHUB_PASSWORD}}

      # DockerHub에 푸시
      - name: Build and push to DockerHub
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ secrets.DOCKERHUB_TAG }}

  deploy:
    needs: build-docker-image
    name: Deploy
    runs-on: [ self-hosted, label-development ]
    steps:
      - name: Docker run
        run: |
          sudo docker stop airdns && docker rm airdns && docker rmi ${{ secrets.DOCKERHUB_TAG }}
          sudo docker run -d -p 80:8080 ${{ secrets.PROD_ENV }} --name airdns ${{ secrets.DOCKERHUB_TAG }}